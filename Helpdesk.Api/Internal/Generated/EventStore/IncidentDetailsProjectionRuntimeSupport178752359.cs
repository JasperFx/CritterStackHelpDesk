// <auto-generated/>
#pragma warning disable
using Helpdesk.Api;
using Marten;
using Marten.Events.Aggregation;
using Marten.Internal.Storage;
using System;
using System.Linq;

namespace Marten.Generated.EventStore
{
    // START: IncidentDetailsProjectionLiveAggregation178752359
    public class IncidentDetailsProjectionLiveAggregation178752359 : Marten.Events.Aggregation.SyncLiveAggregatorBase<Helpdesk.Api.IncidentDetails>
    {
        private readonly Helpdesk.Api.IncidentDetailsProjection _incidentDetailsProjection;

        public IncidentDetailsProjectionLiveAggregation178752359(Helpdesk.Api.IncidentDetailsProjection incidentDetailsProjection)
        {
            _incidentDetailsProjection = incidentDetailsProjection;
        }



        public override Helpdesk.Api.IncidentDetails Build(System.Collections.Generic.IReadOnlyList<Marten.Events.IEvent> events, Marten.IQuerySession session, Helpdesk.Api.IncidentDetails snapshot)
        {
            if (!events.Any()) return null;
            Helpdesk.Api.IncidentDetails incidentDetails = null;
            var usedEventOnCreate = snapshot is null;
            snapshot ??= Create(events[0], session);;
            if (snapshot is null)
            {
                usedEventOnCreate = false;
                snapshot = CreateDefault(events[0]);
            }

            foreach (var @event in events.Skip(usedEventOnCreate ? 1 : 0))
            {
                snapshot = Apply(@event, snapshot, session);
            }

            return snapshot;
        }


        public Helpdesk.Api.IncidentDetails Create(Marten.Events.IEvent @event, Marten.IQuerySession session)
        {
            switch (@event)
            {
                case Marten.Events.IEvent<Helpdesk.Api.IncidentLogged> event_IncidentLogged1:
                    return Helpdesk.Api.IncidentDetailsProjection.Create(event_IncidentLogged1);
                    break;
            }

            return null;
        }


        public Helpdesk.Api.IncidentDetails CreateDefault(Marten.Events.IEvent @event)
        {
            throw new System.InvalidOperationException($"There is no default constructor for Helpdesk.Api.IncidentDetails or Create method for {@event.DotNetTypeName} event type.Check more about the create method convention in documentation: https://martendb.io/events/projections/event-projections.html#create-method-convention. If you're using Upcasting, check if {@event.DotNetTypeName} is an old event type. If it is, make sure to define transformation for it to new event type. Read more in Upcasting docs: https://martendb.io/events/versioning.html#upcasting-advanced-payload-transformations.");
        }


        public Helpdesk.Api.IncidentDetails Apply(Marten.Events.IEvent @event, Helpdesk.Api.IncidentDetails aggregate, Marten.IQuerySession session)
        {
            switch (@event)
            {
                case Marten.Events.IEvent<Helpdesk.Api.IncidentCategorised> event_IncidentCategorised2:
                    aggregate = _incidentDetailsProjection.Apply(event_IncidentCategorised2.Data, aggregate);
                    break;
                case Marten.Events.IEvent<Helpdesk.Api.IncidentPrioritised> event_IncidentPrioritised3:
                    aggregate = _incidentDetailsProjection.Apply(event_IncidentPrioritised3.Data, aggregate);
                    break;
                case Marten.Events.IEvent<Helpdesk.Api.AgentAssignedToIncident> event_AgentAssignedToIncident4:
                    aggregate = _incidentDetailsProjection.Apply(event_AgentAssignedToIncident4.Data, aggregate);
                    break;
                case Marten.Events.IEvent<Helpdesk.Api.IncidentResolved> event_IncidentResolved5:
                    aggregate = _incidentDetailsProjection.Apply(event_IncidentResolved5.Data, aggregate);
                    break;
                case Marten.Events.IEvent<Helpdesk.Api.ResolutionAcknowledgedByCustomer> event_ResolutionAcknowledgedByCustomer6:
                    aggregate = _incidentDetailsProjection.Apply(event_ResolutionAcknowledgedByCustomer6.Data, aggregate);
                    break;
                case Marten.Events.IEvent<Helpdesk.Api.IncidentClosed> event_IncidentClosed7:
                    aggregate = _incidentDetailsProjection.Apply(event_IncidentClosed7.Data, aggregate);
                    break;
            }

            return aggregate;
        }

    }

    // END: IncidentDetailsProjectionLiveAggregation178752359
    
    
    // START: IncidentDetailsProjectionInlineHandler178752359
    public class IncidentDetailsProjectionInlineHandler178752359 : Marten.Events.Aggregation.AggregationRuntime<Helpdesk.Api.IncidentDetails, System.Guid>
    {
        private readonly Marten.IDocumentStore _store;
        private readonly Marten.Events.Aggregation.IAggregateProjection _projection;
        private readonly Marten.Events.Aggregation.IEventSlicer<Helpdesk.Api.IncidentDetails, System.Guid> _slicer;
        private readonly Marten.Internal.Storage.IDocumentStorage<Helpdesk.Api.IncidentDetails, System.Guid> _storage;
        private readonly Helpdesk.Api.IncidentDetailsProjection _incidentDetailsProjection;

        public IncidentDetailsProjectionInlineHandler178752359(Marten.IDocumentStore store, Marten.Events.Aggregation.IAggregateProjection projection, Marten.Events.Aggregation.IEventSlicer<Helpdesk.Api.IncidentDetails, System.Guid> slicer, Marten.Internal.Storage.IDocumentStorage<Helpdesk.Api.IncidentDetails, System.Guid> storage, Helpdesk.Api.IncidentDetailsProjection incidentDetailsProjection) : base(store, projection, slicer, storage)
        {
            _store = store;
            _projection = projection;
            _slicer = slicer;
            _storage = storage;
            _incidentDetailsProjection = incidentDetailsProjection;
        }



        public override async System.Threading.Tasks.ValueTask<Helpdesk.Api.IncidentDetails> ApplyEvent(Marten.IQuerySession session, Marten.Events.Projections.EventSlice<Helpdesk.Api.IncidentDetails, System.Guid> slice, Marten.Events.IEvent evt, Helpdesk.Api.IncidentDetails aggregate, System.Threading.CancellationToken cancellationToken)
        {
            switch (evt)
            {
                case Marten.Events.IEvent<Helpdesk.Api.ResolutionAcknowledgedByCustomer> event_ResolutionAcknowledgedByCustomer13:
                    if(aggregate == default) throw new Marten.Exceptions.InvalidProjectionException("Projection for Helpdesk.Api.IncidentDetails should either have a static Create method that returns the event type Marten.Events.IEvent<Helpdesk.Api.ResolutionAcknowledgedByCustomer> or Helpdesk.Api.IncidentDetails should have either have a public, no argument constructor or a constructor function that takes the Marten.Events.IEvent<Helpdesk.Api.ResolutionAcknowledgedByCustomer> as a parameter. This error occurs when Marten is trying to build a new aggregate, but the aggregate projection does not have a way to create a new aggregate from the first event in the event stream. A common cause is persisting events out of order according to your application's domain logic rules");
                    aggregate = _incidentDetailsProjection.Apply(event_ResolutionAcknowledgedByCustomer13.Data, aggregate);
                    return aggregate;
                case Marten.Events.IEvent<Helpdesk.Api.IncidentResolved> event_IncidentResolved12:
                    if(aggregate == default) throw new Marten.Exceptions.InvalidProjectionException("Projection for Helpdesk.Api.IncidentDetails should either have a static Create method that returns the event type Marten.Events.IEvent<Helpdesk.Api.IncidentResolved> or Helpdesk.Api.IncidentDetails should have either have a public, no argument constructor or a constructor function that takes the Marten.Events.IEvent<Helpdesk.Api.IncidentResolved> as a parameter. This error occurs when Marten is trying to build a new aggregate, but the aggregate projection does not have a way to create a new aggregate from the first event in the event stream. A common cause is persisting events out of order according to your application's domain logic rules");
                    aggregate = _incidentDetailsProjection.Apply(event_IncidentResolved12.Data, aggregate);
                    return aggregate;
                case Marten.Events.IEvent<Helpdesk.Api.IncidentClosed> event_IncidentClosed14:
                    if(aggregate == default) throw new Marten.Exceptions.InvalidProjectionException("Projection for Helpdesk.Api.IncidentDetails should either have a static Create method that returns the event type Marten.Events.IEvent<Helpdesk.Api.IncidentClosed> or Helpdesk.Api.IncidentDetails should have either have a public, no argument constructor or a constructor function that takes the Marten.Events.IEvent<Helpdesk.Api.IncidentClosed> as a parameter. This error occurs when Marten is trying to build a new aggregate, but the aggregate projection does not have a way to create a new aggregate from the first event in the event stream. A common cause is persisting events out of order according to your application's domain logic rules");
                    aggregate = _incidentDetailsProjection.Apply(event_IncidentClosed14.Data, aggregate);
                    return aggregate;
                case Marten.Events.IEvent<Helpdesk.Api.IncidentLogged> event_IncidentLogged15:
                    aggregate = Helpdesk.Api.IncidentDetailsProjection.Create(event_IncidentLogged15);
                    return aggregate;
                case Marten.Events.IEvent<Helpdesk.Api.IncidentCategorised> event_IncidentCategorised9:
                    if(aggregate == default) throw new Marten.Exceptions.InvalidProjectionException("Projection for Helpdesk.Api.IncidentDetails should either have a static Create method that returns the event type Marten.Events.IEvent<Helpdesk.Api.IncidentCategorised> or Helpdesk.Api.IncidentDetails should have either have a public, no argument constructor or a constructor function that takes the Marten.Events.IEvent<Helpdesk.Api.IncidentCategorised> as a parameter. This error occurs when Marten is trying to build a new aggregate, but the aggregate projection does not have a way to create a new aggregate from the first event in the event stream. A common cause is persisting events out of order according to your application's domain logic rules");
                    aggregate = _incidentDetailsProjection.Apply(event_IncidentCategorised9.Data, aggregate);
                    return aggregate;
                case Marten.Events.IEvent<Helpdesk.Api.IncidentPrioritised> event_IncidentPrioritised10:
                    if(aggregate == default) throw new Marten.Exceptions.InvalidProjectionException("Projection for Helpdesk.Api.IncidentDetails should either have a static Create method that returns the event type Marten.Events.IEvent<Helpdesk.Api.IncidentPrioritised> or Helpdesk.Api.IncidentDetails should have either have a public, no argument constructor or a constructor function that takes the Marten.Events.IEvent<Helpdesk.Api.IncidentPrioritised> as a parameter. This error occurs when Marten is trying to build a new aggregate, but the aggregate projection does not have a way to create a new aggregate from the first event in the event stream. A common cause is persisting events out of order according to your application's domain logic rules");
                    aggregate = _incidentDetailsProjection.Apply(event_IncidentPrioritised10.Data, aggregate);
                    return aggregate;
                case Marten.Events.IEvent<Helpdesk.Api.AgentAssignedToIncident> event_AgentAssignedToIncident11:
                    if(aggregate == default) throw new Marten.Exceptions.InvalidProjectionException("Projection for Helpdesk.Api.IncidentDetails should either have a static Create method that returns the event type Marten.Events.IEvent<Helpdesk.Api.AgentAssignedToIncident> or Helpdesk.Api.IncidentDetails should have either have a public, no argument constructor or a constructor function that takes the Marten.Events.IEvent<Helpdesk.Api.AgentAssignedToIncident> as a parameter. This error occurs when Marten is trying to build a new aggregate, but the aggregate projection does not have a way to create a new aggregate from the first event in the event stream. A common cause is persisting events out of order according to your application's domain logic rules");
                    aggregate = _incidentDetailsProjection.Apply(event_AgentAssignedToIncident11.Data, aggregate);
                    return aggregate;
            }

            return aggregate;
        }


        public Helpdesk.Api.IncidentDetails Create(Marten.Events.IEvent @event, Marten.IQuerySession session)
        {
            switch (@event)
            {
                case Marten.Events.IEvent<Helpdesk.Api.IncidentLogged> event_IncidentLogged8:
                    return Helpdesk.Api.IncidentDetailsProjection.Create(event_IncidentLogged8);
                    break;
            }

            return null;
        }


        public Helpdesk.Api.IncidentDetails CreateDefault(Marten.Events.IEvent @event)
        {
            throw new System.InvalidOperationException($"There is no default constructor for Helpdesk.Api.IncidentDetails or Create method for {@event.DotNetTypeName} event type.Check more about the create method convention in documentation: https://martendb.io/events/projections/event-projections.html#create-method-convention. If you're using Upcasting, check if {@event.DotNetTypeName} is an old event type. If it is, make sure to define transformation for it to new event type. Read more in Upcasting docs: https://martendb.io/events/versioning.html#upcasting-advanced-payload-transformations.");
        }

    }

    // END: IncidentDetailsProjectionInlineHandler178752359
    
    
}

